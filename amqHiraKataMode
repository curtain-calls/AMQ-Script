// ==UserScript==
// @name         AMQ Multiple Choice Kana Converter
// @namespace    https://github.com/your-namespace/amq-kana-converter
// @version      1.0
// @description  Convert Multiple Choice answers to Hiragana or Katakana for learning
// @author       YourName
// @match        https://animemusicquiz.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Settings
    let conversionMode = 0; // 0 = Off, 1 = Hiragana, 2 = Katakana
    const STORAGE_KEY = 'amq_kana_mode';

    // Load saved setting
    if (localStorage.getItem(STORAGE_KEY)) {
        conversionMode = parseInt(localStorage.getItem(STORAGE_KEY));
    }

    // Complete Hiragana mapping
    const hiraganaMap = {
        // Vowels
        'a': 'あ', 'i': 'い', 'u': 'う', 'e': 'え', 'o': 'お',
        // K row
        'ka': 'か', 'ki': 'き', 'ku': 'く', 'ke': 'け', 'ko': 'こ',
        'kya': 'きゃ', 'kyu': 'きゅ', 'kyo': 'きょ',
        // G row
        'ga': 'が', 'gi': 'ぎ', 'gu': 'ぐ', 'ge': 'げ', 'go': 'ご',
        'gya': 'ぎゃ', 'gyu': 'ぎゅ', 'gyo': 'ぎょ',
        // S row
        'sa': 'さ', 'shi': 'し', 'su': 'す', 'se': 'せ', 'so': 'そ',
        'sha': 'しゃ', 'shu': 'しゅ', 'sho': 'しょ',
        'si': 'し', 'sya': 'しゃ', 'syu': 'しゅ', 'syo': 'しょ',
        // Z row
        'za': 'ざ', 'ji': 'じ', 'zu': 'ず', 'ze': 'ぜ', 'zo': 'ぞ',
        'ja': 'じゃ', 'ju': 'じゅ', 'jo': 'じょ',
        'zi': 'じ', 'jya': 'じゃ', 'jyu': 'じゅ', 'jyo': 'じょ',
        'zya': 'じゃ', 'zyu': 'じゅ', 'zyo': 'じょ',
        // T row
        'ta': 'た', 'chi': 'ち', 'tsu': 'つ', 'te': 'て', 'to': 'と',
        'cha': 'ちゃ', 'chu': 'ちゅ', 'cho': 'ちょ',
        'ti': 'ち', 'tu': 'つ', 'tya': 'ちゃ', 'tyu': 'ちゅ', 'tyo': 'ちょ',
        // D row
        'da': 'だ', 'di': 'ぢ', 'du': 'づ', 'de': 'で', 'do': 'ど',
        'dya': 'ぢゃ', 'dyu': 'ぢゅ', 'dyo': 'ぢょ',
        // N row
        'na': 'な', 'ni': 'に', 'nu': 'ぬ', 'ne': 'ね', 'no': 'の',
        'nya': 'にゃ', 'nyu': 'にゅ', 'nyo': 'にょ',
        // H row
        'ha': 'は', 'hi': 'ひ', 'fu': 'ふ', 'he': 'へ', 'ho': 'ほ',
        'hya': 'ひゃ', 'hyu': 'ひゅ', 'hyo': 'ひょ',
        'hu': 'ふ',
        // B row
        'ba': 'ば', 'bi': 'び', 'bu': 'ぶ', 'be': 'べ', 'bo': 'ぼ',
        'bya': 'びゃ', 'byu': 'びゅ', 'byo': 'びょ',
        // P row
        'pa': 'ぱ', 'pi': 'ぴ', 'pu': 'ぷ', 'pe': 'ぺ', 'po': 'ぽ',
        'pya': 'ぴゃ', 'pyu': 'ぴゅ', 'pyo': 'ぴょ',
        // M row
        'ma': 'ま', 'mi': 'み', 'mu': 'む', 'me': 'め', 'mo': 'も',
        'mya': 'みゃ', 'myu': 'みゅ', 'myo': 'みょ',
        // Y row
        'ya': 'や', 'yu': 'ゆ', 'yo': 'よ',
        // R row
        'ra': 'ら', 'ri': 'り', 'ru': 'る', 're': 'れ', 'ro': 'ろ',
        'rya': 'りゃ', 'ryu': 'りゅ', 'ryo': 'りょ',
        // W row
        'wa': 'わ', 'wi': 'ゐ', 'we': 'ゑ', 'wo': 'を',
        // N
        'n': 'ん',
        // Special
        'vu': 'ゔ',
        // Long vowel marker
        'ー': 'ー', '-': 'ー'
    };

    // Complete Katakana mapping
    const katakanaMap = {
        // Vowels
        'a': 'ア', 'i': 'イ', 'u': 'ウ', 'e': 'エ', 'o': 'オ',
        // K row
        'ka': 'カ', 'ki': 'キ', 'ku': 'ク', 'ke': 'ケ', 'ko': 'コ',
        'kya': 'キャ', 'kyu': 'キュ', 'kyo': 'キョ',
        // G row
        'ga': 'ガ', 'gi': 'ギ', 'gu': 'グ', 'ge': 'ゲ', 'go': 'ゴ',
        'gya': 'ギャ', 'gyu': 'ギュ', 'gyo': 'ギョ',
        // S row
        'sa': 'サ', 'shi': 'シ', 'su': 'ス', 'se': 'セ', 'so': 'ソ',
        'sha': 'シャ', 'shu': 'シュ', 'sho': 'ショ',
        'si': 'シ', 'sya': 'シャ', 'syu': 'シュ', 'syo': 'ショ',
        // Z row
        'za': 'ザ', 'ji': 'ジ', 'zu': 'ズ', 'ze': 'ゼ', 'zo': 'ゾ',
        'ja': 'ジャ', 'ju': 'ジュ', 'jo': 'ジョ',
        'zi': 'ジ', 'jya': 'ジャ', 'jyu': 'ジュ', 'jyo': 'ジョ',
        'zya': 'ジャ', 'zyu': 'ジュ', 'zyo': 'ジョ',
        // T row
        'ta': 'タ', 'chi': 'チ', 'tsu': 'ツ', 'te': 'テ', 'to': 'ト',
        'cha': 'チャ', 'chu': 'チュ', 'cho': 'チョ',
        'ti': 'チ', 'tu': 'ツ', 'tya': 'チャ', 'tyu': 'チュ', 'tyo': 'チョ',
        // D row
        'da': 'ダ', 'di': 'ヂ', 'du': 'ヅ', 'de': 'デ', 'do': 'ド',
        'dya': 'ヂャ', 'dyu': 'ヂュ', 'dyo': 'ヂョ',
        // N row
        'na': 'ナ', 'ni': 'ニ', 'nu': 'ヌ', 'ne': 'ネ', 'no': 'ノ',
        'nya': 'ニャ', 'nyu': 'ニュ', 'nyo': 'ニョ',
        // H row
        'ha': 'ハ', 'hi': 'ヒ', 'fu': 'フ', 'he': 'ヘ', 'ho': 'ホ',
        'hya': 'ヒャ', 'hyu': 'ヒュ', 'hyo': 'ヒョ',
        'hu': 'フ',
        // B row
        'ba': 'バ', 'bi': 'ビ', 'bu': 'ブ', 'be': 'ベ', 'bo': 'ボ',
        'bya': 'ビャ', 'byu': 'ビュ', 'byo': 'ビョ',
        // P row
        'pa': 'パ', 'pi': 'ピ', 'pu': 'プ', 'pe': 'ペ', 'po': 'ポ',
        'pya': 'ピャ', 'pyu': 'ピュ', 'pyo': 'ピョ',
        // M row
        'ma': 'マ', 'mi': 'ミ', 'mu': 'ム', 'me': 'メ', 'mo': 'モ',
        'mya': 'ミャ', 'myu': 'ミュ', 'myo': 'ミョ',
        // Y row
        'ya': 'ヤ', 'yu': 'ユ', 'yo': 'ヨ',
        // R row
        'ra': 'ラ', 'ri': 'リ', 'ru': 'ル', 're': 'レ', 'ro': 'ロ',
        'rya': 'リャ', 'ryu': 'リュ', 'ryo': 'リョ',
        // W row
        'wa': 'ワ', 'wi': 'ヰ', 'we': 'ヱ', 'wo': 'ヲ',
        // N
        'n': 'ン',
        // Special
        'vu': 'ヴ',
        // Long vowel marker
        'ー': 'ー', '-': 'ー'
    };

    function convertWord(word, useKatakana) {
        const kanaMap = useKatakana ? katakanaMap : hiraganaMap;
        const smallTsu = useKatakana ? 'ッ' : 'っ';

        let result = '';
        let i = 0;
        const lowerWord = word.toLowerCase();

        while (i < lowerWord.length) {
            let matched = false;

            // Check for doubled consonants (except 'n')
            if (i < lowerWord.length - 1 &&
                lowerWord[i] === lowerWord[i + 1] &&
                lowerWord[i] !== 'n' &&
                'bcdghjkmprstyz'.includes(lowerWord[i])) {
                result += smallTsu;
                i++;
                continue;
            }

            // Try to match 3, 2, or 1 character combinations
            for (let len = 3; len >= 1; len--) {
                if (i + len > lowerWord.length) continue;

                const chunk = lowerWord.substr(i, len);

                if (kanaMap[chunk]) {
                    result += kanaMap[chunk];
                    i += len;
                    matched = true;
                    break;
                }
            }

            // If no match found, conversion failed
            if (!matched) {
                return null;
            }
        }

        return result;
    }

    function convertToKana(title, useKatakana) {
        if (!title) return title;

        // Split by spaces and punctuation (including special chars like ☆★!), but keep them
        const parts = title.split(/(\s+|:|\.|-|\/|☆|★|♪|♡|♥|×|・|~|～|!|！|x|X|\d+)/);
        let result = [];
        let hadSuccess = false;
        let afterPunctuation = false;

        for (let part of parts) {
            // Keep whitespace, punctuation, numbers, and 'x'
            if (/^(\s+|:|\.|-|\/|☆|★|♪|♡|♥|×|・|~|～|!|！|x|X|\d+)$/.test(part)) {
                result.push(part);
                if (/^(:|\.|-|☆|★|×|・|!|x|X)$/.test(part)) {
                    afterPunctuation = true;
                }
                continue;
            }

            if (!part) continue;

            const converted = convertWord(part, useKatakana);

            if (converted !== null) {
                result.push(converted);
                hadSuccess = true;
                afterPunctuation = false;
            } else {
                // Conversion failed
                if (hadSuccess && afterPunctuation) {
                    // We already converted something and hit punctuation,
                    // skip remaining English parts
                    continue;
                } else {
                    // Haven't converted anything yet, keep original
                    result.push(part);
                }
            }
        }

        // If we converted anything, return converted parts only
        // If nothing converted, return original
        const finalResult = result.join('');
        return hadSuccess ? finalResult : title;
    }

    function applyConversion() {
        if (!quiz?.answerInput?.multipleChoice?.answerOptions) return;

        quiz.answerInput.multipleChoice.answerOptions.forEach(option => {
            if (!option.currentName) return;

            let displayText;
            if (conversionMode === 0) {
                // Mode 0: Off - restore original and enable popover
                displayText = option.currentName;
                option.$body.popover('enable');
            } else {
                // Mode 1: Hiragana, Mode 2: Katakana
                const useKatakana = (conversionMode === 2);
                displayText = convertToKana(option.currentName, useKatakana);
                // Disable popover when conversion is active
                option.$body.popover('disable');
            }

            option.$text.text(displayText);
        });

        console.log(`[Kana Converter] Applied ${['Off', 'Hiragana', 'Katakana'][conversionMode]} mode`);
    }

    function toggleMode() {
        conversionMode = (conversionMode + 1) % 3;
        localStorage.setItem(STORAGE_KEY, conversionMode);

        const modeName = ['Off', 'Hiragana', 'Katakana'][conversionMode];
        console.log(`[Kana Converter] Mode switched to: ${modeName}`);

        // Show notification
        if (typeof displayMessage !== 'undefined') {
            displayMessage(`Kana Mode: ${modeName}`);
        }

        // Apply to current answers if visible
        applyConversion();
    }

    function toggleSpecificMode(mode) {
        const modeMap = { 'hira': 1, 'kata': 2 };
        const targetMode = modeMap[mode];

        // If already in this mode, turn off. Otherwise, switch to it.
        if (conversionMode === targetMode) {
            conversionMode = 0; // Turn off
        } else {
            conversionMode = targetMode;
        }

        localStorage.setItem(STORAGE_KEY, conversionMode);

        const modeName = ['Off', 'Hiragana', 'Katakana'][conversionMode];
        console.log(`[Kana Converter] Mode set to: ${modeName}`);

        // Show notification
        if (typeof gameChat !== 'undefined') {
            gameChat.systemMessage(`Kana Mode: ${modeName}`);
        }

        // Apply to current answers if visible
        applyConversion();
    }

    function setupChatCommands() {
        // Hook into game chat input
        const chatInput = document.getElementById('gcInput');
        if (!chatInput) {
            console.warn('[Kana Converter] Chat input not found, retrying...');
            setTimeout(setupChatCommands, 1000);
            return;
        }

        chatInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                const message = chatInput.value.trim();

                // Check for commands
                if (message === '/hira') {
                    e.preventDefault();
                    toggleSpecificMode('hira');
                    chatInput.value = '';
                } else if (message === '/kata') {
                    e.preventDefault();
                    toggleSpecificMode('kata');
                    chatInput.value = '';
                }
            }
        });

        console.log('[Kana Converter] Chat commands hooked!');
    }

    function initialize() {
        console.log('[Kana Converter] Initializing...');

        // Wait for quiz to be ready
        const waitForQuiz = setInterval(() => {
            if (typeof quiz !== 'undefined' &&
                typeof Listener !== 'undefined') {
                clearInterval(waitForQuiz);

                // Listen for when answers appear
                new Listener("quiz ready", () => {
                    console.log('[Kana Converter] Quiz ready');
                }).bindListener();

                new Listener("play next song", () => {
                    setTimeout(() => {
                        applyConversion();
                    }, 100);
                }).bindListener();

                // Hook into chat commands
                setupChatCommands();

                console.log('[Kana Converter] Initialized! Use /hira or /kata in chat to toggle');
                console.log(`[Kana Converter] Current mode: ${['Off', 'Hiragana', 'Katakana'][conversionMode]}`);
            }
        }, 500);
    }

    // Start initialization
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        initialize();
    }
})();
